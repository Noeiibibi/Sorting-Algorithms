from pyglet.window import Window
from pyglet.app import run
from pyglet.shapes import Rectangle
from pyglet.graphics import Batch
from pyglet import clock

class ColorfulBarsSimulation(Window):
    def __init__(self):
        """
        Initialize the ColorfulBarsSimulation window.
        """
        super().__init__(1200, 860, "Colorful Bars Simulation")
        self.batch = Batch()
        self.bar_heights = [1, 8, 3, 7, 6, 5, 2, 4]
        self.bars = []
        self.bar_colors = ['#F9ACC0', '#C4B3C3', '#EEB189', '#D9DEBB', '#FAAE9F','#AAD4E0', '#F9EEB6', '#86A5C4 ']

        for index, height in enumerate(self.bar_heights):
            rgb_color = self.hex_to_rgb(self.bar_colors[index])
            self.bars.append(Rectangle(100 + index * 100, 100, 80, height * 100, color=rgb_color, batch=self.batch))

    def hex_to_rgb(self, hex_color):
        """
        Convert hex color code to RGB values.

        Parameters:
            hex_color (str): Hexadecimal color code.

        Returns:
            tuple: RGB values as integers.
        """
        return int(hex_color[1:3], 16), int(hex_color[3:5], 16), int(hex_color[5:7], 16), 255

    def merge_sort(self, arr):
        """
        Perform merge sort on the given list.

        Parameters:
            arr (list): List to be sorted.
        """
        if len(arr) > 1:
            mid = len(arr) // 2
            left_half = arr[:mid]
            right_half = arr[mid:]

            self.merge_sort(left_half)
            self.merge_sort(right_half)

            i = j = k = 0

            while i < len(left_half) and j < len(right_half):
                if left_half[i] < right_half[j]:
                    arr[k] = left_half[i]
                    i += 1
                else:
                    arr[k] = right_half[j]
                    j += 1
                k += 1

            while i < len(left_half):
                arr[k] = left_half[i]
                i += 1
                k += 1

            while j < len(right_half):
                arr[k] = right_half[j]
                j += 1
                k += 1

    def update_bars(self):
        """
        Update the bars based on the sorted heights.
        """
        self.bars = []
        for index, height in enumerate(self.bar_heights):
            rgb_color = self.hex_to_rgb(self.bar_colors[index])
            self.bars.append(Rectangle(100 + index * 100, 100, 80, height * 100, color=rgb_color, batch=self.batch))

    def on_update(self, delta_time):
        """
        Event handler for the update event.

        Parameters:
            delta_time (float): Time elapsed since the last update.
        """
        self.merge_sort(self.bar_heights)
        self.update_bars()

    def on_draw(self):
        """
        Event handler for the draw event.
        """
        self.clear()
        self.batch.draw()

# Create and run the simulation
colorful_bars_simulation = ColorfulBarsSimulation()
clock.schedule_interval(colorful_bars_simulation.on_update, 1)
run()
